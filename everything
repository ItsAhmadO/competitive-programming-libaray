#include <bits/stdc++.h>
using namespace std;
#define ll long long

int popcount(int x){
    return __builtin_popcount(x);
}

int getIthBit(int n, int i){
    int mask = (1<<i);
    return (n & mask) > 0 ? 1 : 0;
}

void clearIthBit(int &n, int i){
    int mask = ~(1<<i);
    n = n & mask;
}

void setIthBit(int &n, int i){
    int mask = (1<<i);
    n = (n|mask);
}

void updateIthBit(int &n, int i, int v){
    clearIthBit(n, i);
    int mask = (v<<i);
    n = (n|mask);
}

int clearLastIBits(int &n, int i){
    int mask = (-1<<i);
    n = n & mask;
}

void clearBitsInRange(int &n, int i, int j){ 
    int a = (~0)<<(j+1);
    int b = (1<<i) - 1;
    int mask = a|b;
    n = n & mask;
}

void replaceBits(int &n, int i, int j, int m){
    clearBitsInRange(n,i,j);
    int mask = (m<<i);
    n = n | mask;
}

int convertToBinary(int n){
    int ans=0;
    int p=1;
    while(n>0){
        int last_bit = (n&1);
        ans += p*last_bit;
        p *= 10;
        n >>= 1;
    }

    return ans;
}

char digitToChar(int digit){
	return digit + '0';
}

int charToDigit(char ch){
	return ch - '0';
}

string addNumbers(string n1, string n2){
	if(n1.length() > n2.length()){
		swap(n1,n2);
	}
	string result = "";
	reverse(n1.begin(),n1.end());
	reverse(n2.begin(),n2.end());
	int carry = 0;
	for(int i=0; i < n1.length(); i++){
		int d1 = charToDigit(n1[i]);
		int d2 = charToDigit(n2[i]);
		int sum = d1 + d2 + carry;
		int output_digit = sum % 10;
		carry = sum/10;
		result.push_back(digitToChar(output_digit));
	}

	for(int i = n1.length(); i < n2.length(); i++){
		int d2 = charToDigit(n2[i]);
		int sum = d2 + carry;
		int output_digit = sum % 10;
		carry = sum/10;
		result.push_back(digitToChar(output_digit));
	}

	if(carry)
	{
		result.push_back('1');
	}

	reverse(result.begin(), result.end());
	return result;
}

void multiply(vector<int> &a, int no, int &size){
	int carry = 0;
	for(int i=0; i < size; i++){

		int product = a[i] * no + carry;
		a[i] = product % 10;
		carry = product / 10;
	}

	while(carry){
		a[size] = carry % 10;
		carry = carry/10;
		size = size + 1;	
	}
}

void bigFactorial(int n){
	vector<int> a(1000,0);
	a[0] = 1;
	int size = 1;

	for(int i=2; i<=n; i++){
		multiply(a,i,size);
	}

	for(int i = size - 1; i >=0 ; i--){
		cout << a[i];
	}
	cout << endl;
}

int main(){
    string x,y;
    cin >> x >> y;
    
}
